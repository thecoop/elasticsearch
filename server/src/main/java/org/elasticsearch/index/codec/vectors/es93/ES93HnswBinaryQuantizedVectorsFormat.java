/*
 * @notice
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Modifications copyright (C) 2024 Elasticsearch B.V.
 */
package org.elasticsearch.index.codec.vectors.es93;

import org.apache.lucene.codecs.hnsw.FlatVectorsFormat;
import org.apache.lucene.codecs.lucene99.Lucene99FlatVectorsFormat;
import org.elasticsearch.index.codec.vectors.es92.ES92BFloat16FlatVectorsFormat;

import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.atomic.AtomicReference;

public class ES93HnswBinaryQuantizedVectorsFormat extends ES93GenericHnswVectorsFormat {

    public static final String NAME = "ES93HnswBinaryQuantizedVectorsFormat";

    private static final Map<String, FlatVectorsFormat> supportedFormats = Map.ofEntries(
        entryForFormat(false, false),
        entryForFormat(false, true),
        entryForFormat(true, false),
        entryForFormat(true, true)
    );

    private static Map.Entry<String, FlatVectorsFormat> entryForFormat(boolean bfloat16, boolean directIO) {
        FlatVectorsFormat format = constructQuantizedVectorsFormat(bfloat16, directIO);
        return Map.entry(format.getName(), format);
    }

    private static String constructFlatFormatName(boolean bfloat16, boolean directIO) {
        StringBuilder sb = new StringBuilder();
        if (directIO) sb.append("DirectIO");
        if (bfloat16) sb.append("BFloat16");
        return sb.append(ES93BinaryQuantizedVectorsFormat.NAME).toString();
    }

    private static FlatVectorsFormat constructQuantizedVectorsFormat(boolean bfloat16, boolean directIO) {
        FlatVectorsFormat rawVectorFormat;
        if (bfloat16) {
            if (directIO) {
                rawVectorFormat = DirectIOFormatWrapper.forES93BFloat16FlatVectorsFormat(ES93BinaryQuantizedVectorsFormat.scorer);
            } else {
                rawVectorFormat = new ES92BFloat16FlatVectorsFormat(ES93BinaryQuantizedVectorsFormat.scorer);
            }
        } else {
            if (directIO) {
                rawVectorFormat = DirectIOFormatWrapper.forLucene99FlatVectorsFormat(ES93BinaryQuantizedVectorsFormat.scorer);
            } else {
                rawVectorFormat = new Lucene99FlatVectorsFormat(ES93BinaryQuantizedVectorsFormat.scorer);
            }
        }
        return new ES93BinaryQuantizedVectorsFormat(constructFlatFormatName(bfloat16, directIO), rawVectorFormat);
    }

    /** Constructs a format using default graph construction parameters */
    public ES93HnswBinaryQuantizedVectorsFormat() {
        super(NAME);
    }

    /**
     * Constructs a format using the given graph construction parameters.
     *
     * @param maxConn the maximum number of connections to a node in the HNSW graph
     * @param beamWidth the size of the queue maintained during graph construction.
     */
    public ES93HnswBinaryQuantizedVectorsFormat(int maxConn, int beamWidth) {
        super(NAME, maxConn, beamWidth);
    }

    /**
     * Constructs a format using the given graph construction parameters and scalar quantization.
     *
     * @param maxConn the maximum number of connections to a node in the HNSW graph
     * @param beamWidth the size of the queue maintained during graph construction.
     * @param numMergeWorkers number of workers (threads) that will be used when doing merge. If
     *     larger than 1, a non-null {@link ExecutorService} must be passed as mergeExec
     * @param mergeExec the {@link ExecutorService} that will be used by ALL vector writers that are
     *     generated by this format to do the merge
     */
    public ES93HnswBinaryQuantizedVectorsFormat(int maxConn, int beamWidth, int numMergeWorkers, ExecutorService mergeExec) {
        super(NAME, maxConn, beamWidth, numMergeWorkers, mergeExec);
    }

    private boolean directIO;
    private boolean bfloat16;

    public ES93HnswBinaryQuantizedVectorsFormat useDirectIO() {
        directIO = true;
        return this;
    }

    public ES93HnswBinaryQuantizedVectorsFormat useBFloat16() {
        bfloat16 = true;
        return this;
    }

    private final AtomicReference<FlatVectorsFormat> writeFormat = new AtomicReference<>();

    @Override
    protected FlatVectorsFormat writeFlatVectorsFormat() {
        var format = writeFormat.get();
        if (format == null) {
            format = constructQuantizedVectorsFormat(bfloat16, directIO);
            writeFormat.set(format);
        }
        return format;
    }

    @Override
    protected Map<String, FlatVectorsFormat> supportedReadFlatVectorsFormats() {
        return supportedFormats;
    }
}
